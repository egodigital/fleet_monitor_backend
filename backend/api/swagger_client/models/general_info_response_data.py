# coding: utf-8

"""
    Vehicle Booking API by e.GO Digital 

    Describes all backend endpoints.  # noqa: E501

    OpenAPI spec version: 2.0.5
    Contact: hello@e-go-digital.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GeneralInfoResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'me': 'GeneralInfoResponseDataMe',
        'now': 'str',
        'team': 'TeamItem'
    }

    attribute_map = {
        'me': 'me',
        'now': 'now',
        'team': 'team'
    }

    def __init__(self, me=None, now=None, team=None):  # noqa: E501
        """GeneralInfoResponseData - a model defined in Swagger"""  # noqa: E501

        self._me = None
        self._now = None
        self._team = None
        self.discriminator = None

        if me is not None:
            self.me = me
        if now is not None:
            self.now = now
        if team is not None:
            self.team = team

    @property
    def me(self):
        """Gets the me of this GeneralInfoResponseData.  # noqa: E501


        :return: The me of this GeneralInfoResponseData.  # noqa: E501
        :rtype: GeneralInfoResponseDataMe
        """
        return self._me

    @me.setter
    def me(self, me):
        """Sets the me of this GeneralInfoResponseData.


        :param me: The me of this GeneralInfoResponseData.  # noqa: E501
        :type: GeneralInfoResponseDataMe
        """

        self._me = me

    @property
    def now(self):
        """Gets the now of this GeneralInfoResponseData.  # noqa: E501

        The server's timestamp, in UTC.  # noqa: E501

        :return: The now of this GeneralInfoResponseData.  # noqa: E501
        :rtype: str
        """
        return self._now

    @now.setter
    def now(self, now):
        """Sets the now of this GeneralInfoResponseData.

        The server's timestamp, in UTC.  # noqa: E501

        :param now: The now of this GeneralInfoResponseData.  # noqa: E501
        :type: str
        """

        self._now = now

    @property
    def team(self):
        """Gets the team of this GeneralInfoResponseData.  # noqa: E501

        The current team.  # noqa: E501

        :return: The team of this GeneralInfoResponseData.  # noqa: E501
        :rtype: TeamItem
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this GeneralInfoResponseData.

        The current team.  # noqa: E501

        :param team: The team of this GeneralInfoResponseData.  # noqa: E501
        :type: TeamItem
        """

        self._team = team

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GeneralInfoResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GeneralInfoResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
