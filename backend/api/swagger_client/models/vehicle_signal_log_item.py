# coding: utf-8

"""
    Vehicle Booking API by e.GO Digital 

    Describes all backend endpoints.  # noqa: E501

    OpenAPI spec version: 2.0.5
    Contact: hello@e-go-digital.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VehicleSignalLogItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'new_data': 'object',
        'old_data': 'object',
        'signal': 'VehicleSignalItem',
        'vehicle': 'VehicleItem'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'new_data': 'newData',
        'old_data': 'oldData',
        'signal': 'signal',
        'vehicle': 'vehicle'
    }

    def __init__(self, id=None, name=None, new_data=None, old_data=None, signal=None, vehicle=None):  # noqa: E501
        """VehicleSignalLogItem - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._new_data = None
        self._old_data = None
        self._signal = None
        self._vehicle = None
        self.discriminator = None

        self.id = id
        self.name = name
        if new_data is not None:
            self.new_data = new_data
        if old_data is not None:
            self.old_data = old_data
        self.signal = signal
        self.vehicle = vehicle

    @property
    def id(self):
        """Gets the id of this VehicleSignalLogItem.  # noqa: E501

        The ID of the signal.  # noqa: E501

        :return: The id of this VehicleSignalLogItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VehicleSignalLogItem.

        The ID of the signal.  # noqa: E501

        :param id: The id of this VehicleSignalLogItem.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this VehicleSignalLogItem.  # noqa: E501

        The name of the signal.  # noqa: E501

        :return: The name of this VehicleSignalLogItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VehicleSignalLogItem.

        The name of the signal.  # noqa: E501

        :param name: The name of this VehicleSignalLogItem.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def new_data(self):
        """Gets the new_data of this VehicleSignalLogItem.  # noqa: E501

        The new data.  # noqa: E501

        :return: The new_data of this VehicleSignalLogItem.  # noqa: E501
        :rtype: object
        """
        return self._new_data

    @new_data.setter
    def new_data(self, new_data):
        """Sets the new_data of this VehicleSignalLogItem.

        The new data.  # noqa: E501

        :param new_data: The new_data of this VehicleSignalLogItem.  # noqa: E501
        :type: object
        """

        self._new_data = new_data

    @property
    def old_data(self):
        """Gets the old_data of this VehicleSignalLogItem.  # noqa: E501

        The new data.  # noqa: E501

        :return: The old_data of this VehicleSignalLogItem.  # noqa: E501
        :rtype: object
        """
        return self._old_data

    @old_data.setter
    def old_data(self, old_data):
        """Sets the old_data of this VehicleSignalLogItem.

        The new data.  # noqa: E501

        :param old_data: The old_data of this VehicleSignalLogItem.  # noqa: E501
        :type: object
        """

        self._old_data = old_data

    @property
    def signal(self):
        """Gets the signal of this VehicleSignalLogItem.  # noqa: E501

        The underlying signal.  # noqa: E501

        :return: The signal of this VehicleSignalLogItem.  # noqa: E501
        :rtype: VehicleSignalItem
        """
        return self._signal

    @signal.setter
    def signal(self, signal):
        """Sets the signal of this VehicleSignalLogItem.

        The underlying signal.  # noqa: E501

        :param signal: The signal of this VehicleSignalLogItem.  # noqa: E501
        :type: VehicleSignalItem
        """
        if signal is None:
            raise ValueError("Invalid value for `signal`, must not be `None`")  # noqa: E501

        self._signal = signal

    @property
    def vehicle(self):
        """Gets the vehicle of this VehicleSignalLogItem.  # noqa: E501

        The underlying vehicle.  # noqa: E501

        :return: The vehicle of this VehicleSignalLogItem.  # noqa: E501
        :rtype: VehicleItem
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """Sets the vehicle of this VehicleSignalLogItem.

        The underlying vehicle.  # noqa: E501

        :param vehicle: The vehicle of this VehicleSignalLogItem.  # noqa: E501
        :type: VehicleItem
        """
        if vehicle is None:
            raise ValueError("Invalid value for `vehicle`, must not be `None`")  # noqa: E501

        self._vehicle = vehicle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VehicleSignalLogItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleSignalLogItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
