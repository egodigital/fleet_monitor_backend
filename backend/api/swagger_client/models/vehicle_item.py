# coding: utf-8

"""
    Vehicle Booking API by e.GO Digital 

    Describes all backend endpoints.  # noqa: E501

    OpenAPI spec version: 2.0.5
    Contact: hello@e-go-digital.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VehicleItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country': 'str',
        'environment': 'EnvironmentItem',
        'id': 'str',
        'license_plate': 'str',
        'manufacturer': 'str',
        'model': 'str',
        'status': 'str',
        'team': 'TeamItem'
    }

    attribute_map = {
        'country': 'country',
        'environment': 'environment',
        'id': 'id',
        'license_plate': 'licensePlate',
        'manufacturer': 'manufacturer',
        'model': 'model',
        'status': 'status',
        'team': 'team'
    }

    def __init__(self, country=None, environment=None, id=None, license_plate=None, manufacturer=None, model=None, status=None, team=None):  # noqa: E501
        """VehicleItem - a model defined in Swagger"""  # noqa: E501

        self._country = None
        self._environment = None
        self._id = None
        self._license_plate = None
        self._manufacturer = None
        self._model = None
        self._status = None
        self._team = None
        self.discriminator = None

        self.country = country
        if environment is not None:
            self.environment = environment
        self.id = id
        self.license_plate = license_plate
        self.manufacturer = manufacturer
        self.model = model
        if status is not None:
            self.status = status
        if team is not None:
            self.team = team

    @property
    def country(self):
        """Gets the country of this VehicleItem.  # noqa: E501

        The country.  # noqa: E501

        :return: The country of this VehicleItem.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this VehicleItem.

        The country.  # noqa: E501

        :param country: The country of this VehicleItem.  # noqa: E501
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def environment(self):
        """Gets the environment of this VehicleItem.  # noqa: E501

        The underlying environment.  # noqa: E501

        :return: The environment of this VehicleItem.  # noqa: E501
        :rtype: EnvironmentItem
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this VehicleItem.

        The underlying environment.  # noqa: E501

        :param environment: The environment of this VehicleItem.  # noqa: E501
        :type: EnvironmentItem
        """

        self._environment = environment

    @property
    def id(self):
        """Gets the id of this VehicleItem.  # noqa: E501

        The ID of the vehicle.  # noqa: E501

        :return: The id of this VehicleItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VehicleItem.

        The ID of the vehicle.  # noqa: E501

        :param id: The id of this VehicleItem.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def license_plate(self):
        """Gets the license_plate of this VehicleItem.  # noqa: E501

        The license plate.  # noqa: E501

        :return: The license_plate of this VehicleItem.  # noqa: E501
        :rtype: str
        """
        return self._license_plate

    @license_plate.setter
    def license_plate(self, license_plate):
        """Sets the license_plate of this VehicleItem.

        The license plate.  # noqa: E501

        :param license_plate: The license_plate of this VehicleItem.  # noqa: E501
        :type: str
        """
        if license_plate is None:
            raise ValueError("Invalid value for `license_plate`, must not be `None`")  # noqa: E501

        self._license_plate = license_plate

    @property
    def manufacturer(self):
        """Gets the manufacturer of this VehicleItem.  # noqa: E501

        The name of the manufacturer.  # noqa: E501

        :return: The manufacturer of this VehicleItem.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this VehicleItem.

        The name of the manufacturer.  # noqa: E501

        :param manufacturer: The manufacturer of this VehicleItem.  # noqa: E501
        :type: str
        """
        if manufacturer is None:
            raise ValueError("Invalid value for `manufacturer`, must not be `None`")  # noqa: E501

        self._manufacturer = manufacturer

    @property
    def model(self):
        """Gets the model of this VehicleItem.  # noqa: E501

        The name of the model.  # noqa: E501

        :return: The model of this VehicleItem.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this VehicleItem.

        The name of the model.  # noqa: E501

        :param model: The model of this VehicleItem.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def status(self):
        """Gets the status of this VehicleItem.  # noqa: E501

        The current status.  # noqa: E501

        :return: The status of this VehicleItem.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VehicleItem.

        The current status.  # noqa: E501

        :param status: The status of this VehicleItem.  # noqa: E501
        :type: str
        """
        allowed_values = ["available", "blocked", "charging"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def team(self):
        """Gets the team of this VehicleItem.  # noqa: E501

        The underlying team.  # noqa: E501

        :return: The team of this VehicleItem.  # noqa: E501
        :rtype: TeamItem
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this VehicleItem.

        The underlying team.  # noqa: E501

        :param team: The team of this VehicleItem.  # noqa: E501
        :type: TeamItem
        """

        self._team = team

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VehicleItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
