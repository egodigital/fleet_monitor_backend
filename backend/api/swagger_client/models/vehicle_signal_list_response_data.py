# coding: utf-8

"""
    Vehicle Booking API by e.GO Digital 

    Describes all backend endpoints.  # noqa: E501

    OpenAPI spec version: 2.0.5
    Contact: hello@e-go-digital.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VehicleSignalListResponseData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'brake_fluid_level': 'float',
        'battery_charging': 'YesOrNo',
        'battery_charging_current': 'float',
        'battery_health': 'float',
        'battery_loading_capacity': 'float',
        'battery_state_of_charge': 'float',
        'calculated_remaining_distance': 'float',
        'central_locking_system': 'OpenStatus',
        'distance_to_object_back': 'float',
        'distance_to_object_bottom': 'float',
        'distance_to_object_front': 'float',
        'distance_to_object_left': 'float',
        'distance_to_object_right': 'float',
        'distance_trip': 'float',
        'door_disc_front_left': 'OpenStatus',
        'door_disc_front_right': 'OpenStatus',
        'door_front_left': 'OpenStatus',
        'door_front_right': 'OpenStatus',
        'drive_mode': 'str',
        'flash': 'OnOffStatus',
        'heated_seats': 'OnOffStatus',
        'high_beam': 'OnOffStatus',
        'infotainment': 'OnOffStatus',
        'infotainment_volume': 'float',
        'location': 'str',
        'mileage': 'float',
        'motor_control_lamp': 'OnOffStatus',
        'person_count': 'float',
        'pulse_sensor_steering_wheel': 'float',
        'power_consumption': 'float',
        'rain_sensor': 'str',
        'rear_running_lights': 'OnOffStatus',
        'side_lights': 'OnOffStatus',
        'speed': 'float',
        'stop_lights': 'OnOffStatus',
        'temperature_inside': 'float',
        'temperature_outside': 'float',
        'tire_pressure_back_left': 'float',
        'tire_pressure_back_right': 'float',
        'tire_pressure_front_left': 'float',
        'tire_pressure_front_right': 'float',
        'trunk': 'OpenStatus',
        'turn_signal_left': 'OnOffStatus',
        'turn_signal_right': 'OnOffStatus',
        'warning_blinker': 'OnOffStatus',
        'weight': 'float',
        'windshield_wipers': 'OnOffStatus',
        'wiping_water_level': 'float'
    }

    attribute_map = {
        'brake_fluid_level': 'brake_fluid_level',
        'battery_charging': 'battery_charging',
        'battery_charging_current': 'battery_charging_current',
        'battery_health': 'battery_health',
        'battery_loading_capacity': 'battery_loading_capacity',
        'battery_state_of_charge': 'battery_state_of_charge',
        'calculated_remaining_distance': 'calculated_remaining_distance',
        'central_locking_system': 'central_locking_system',
        'distance_to_object_back': 'distance_to_object_back',
        'distance_to_object_bottom': 'distance_to_object_bottom',
        'distance_to_object_front': 'distance_to_object_front',
        'distance_to_object_left': 'distance_to_object_left',
        'distance_to_object_right': 'distance_to_object_right',
        'distance_trip': 'distance_trip',
        'door_disc_front_left': 'door_disc_front_left',
        'door_disc_front_right': 'door_disc_front_right',
        'door_front_left': 'door_front_left',
        'door_front_right': 'door_front_right',
        'drive_mode': 'drive_mode',
        'flash': 'flash',
        'heated_seats': 'heated_seats',
        'high_beam': 'high_beam',
        'infotainment': 'infotainment',
        'infotainment_volume': 'infotainment_volume',
        'location': 'location',
        'mileage': 'mileage',
        'motor_control_lamp': 'motor_control_lamp',
        'person_count': 'person_count',
        'pulse_sensor_steering_wheel': 'pulse_sensor_steering_wheel',
        'power_consumption': 'power_consumption',
        'rain_sensor': 'rain_sensor',
        'rear_running_lights': 'rear_running_lights',
        'side_lights': 'side_lights',
        'speed': 'speed',
        'stop_lights': 'stop_lights',
        'temperature_inside': 'temperature_inside',
        'temperature_outside': 'temperature_outside',
        'tire_pressure_back_left': 'tire_pressure_back_left',
        'tire_pressure_back_right': 'tire_pressure_back_right',
        'tire_pressure_front_left': 'tire_pressure_front_left',
        'tire_pressure_front_right': 'tire_pressure_front_right',
        'trunk': 'trunk',
        'turn_signal_left': 'turn_signal_left',
        'turn_signal_right': 'turn_signal_right',
        'warning_blinker': 'warning_blinker',
        'weight': 'weight',
        'windshield_wipers': 'windshield_wipers',
        'wiping_water_level': 'wiping_water_level'
    }

    def __init__(self, brake_fluid_level=None, battery_charging=None, battery_charging_current=None, battery_health=None, battery_loading_capacity=None, battery_state_of_charge=None, calculated_remaining_distance=None, central_locking_system=None, distance_to_object_back=None, distance_to_object_bottom=None, distance_to_object_front=None, distance_to_object_left=None, distance_to_object_right=None, distance_trip=None, door_disc_front_left=None, door_disc_front_right=None, door_front_left=None, door_front_right=None, drive_mode='eco', flash=None, heated_seats=None, high_beam=None, infotainment=None, infotainment_volume=None, location='50.782117,6.047171', mileage=None, motor_control_lamp=None, person_count=None, pulse_sensor_steering_wheel=None, power_consumption=None, rain_sensor='no_rain', rear_running_lights=None, side_lights=None, speed=None, stop_lights=None, temperature_inside=None, temperature_outside=None, tire_pressure_back_left=None, tire_pressure_back_right=None, tire_pressure_front_left=None, tire_pressure_front_right=None, trunk=None, turn_signal_left=None, turn_signal_right=None, warning_blinker=None, weight=None, windshield_wipers=None, wiping_water_level=None):  # noqa: E501
        """VehicleSignalListResponseData - a model defined in Swagger"""  # noqa: E501

        self._brake_fluid_level = None
        self._battery_charging = None
        self._battery_charging_current = None
        self._battery_health = None
        self._battery_loading_capacity = None
        self._battery_state_of_charge = None
        self._calculated_remaining_distance = None
        self._central_locking_system = None
        self._distance_to_object_back = None
        self._distance_to_object_bottom = None
        self._distance_to_object_front = None
        self._distance_to_object_left = None
        self._distance_to_object_right = None
        self._distance_trip = None
        self._door_disc_front_left = None
        self._door_disc_front_right = None
        self._door_front_left = None
        self._door_front_right = None
        self._drive_mode = None
        self._flash = None
        self._heated_seats = None
        self._high_beam = None
        self._infotainment = None
        self._infotainment_volume = None
        self._location = None
        self._mileage = None
        self._motor_control_lamp = None
        self._person_count = None
        self._pulse_sensor_steering_wheel = None
        self._power_consumption = None
        self._rain_sensor = None
        self._rear_running_lights = None
        self._side_lights = None
        self._speed = None
        self._stop_lights = None
        self._temperature_inside = None
        self._temperature_outside = None
        self._tire_pressure_back_left = None
        self._tire_pressure_back_right = None
        self._tire_pressure_front_left = None
        self._tire_pressure_front_right = None
        self._trunk = None
        self._turn_signal_left = None
        self._turn_signal_right = None
        self._warning_blinker = None
        self._weight = None
        self._windshield_wipers = None
        self._wiping_water_level = None
        self.discriminator = None

        if brake_fluid_level is not None:
            self.brake_fluid_level = brake_fluid_level
        if battery_charging is not None:
            self.battery_charging = battery_charging
        if battery_charging_current is not None:
            self.battery_charging_current = battery_charging_current
        if battery_health is not None:
            self.battery_health = battery_health
        if battery_loading_capacity is not None:
            self.battery_loading_capacity = battery_loading_capacity
        if battery_state_of_charge is not None:
            self.battery_state_of_charge = battery_state_of_charge
        if calculated_remaining_distance is not None:
            self.calculated_remaining_distance = calculated_remaining_distance
        if central_locking_system is not None:
            self.central_locking_system = central_locking_system
        if distance_to_object_back is not None:
            self.distance_to_object_back = distance_to_object_back
        if distance_to_object_bottom is not None:
            self.distance_to_object_bottom = distance_to_object_bottom
        if distance_to_object_front is not None:
            self.distance_to_object_front = distance_to_object_front
        if distance_to_object_left is not None:
            self.distance_to_object_left = distance_to_object_left
        if distance_to_object_right is not None:
            self.distance_to_object_right = distance_to_object_right
        if distance_trip is not None:
            self.distance_trip = distance_trip
        if door_disc_front_left is not None:
            self.door_disc_front_left = door_disc_front_left
        if door_disc_front_right is not None:
            self.door_disc_front_right = door_disc_front_right
        if door_front_left is not None:
            self.door_front_left = door_front_left
        if door_front_right is not None:
            self.door_front_right = door_front_right
        if drive_mode is not None:
            self.drive_mode = drive_mode
        if flash is not None:
            self.flash = flash
        if heated_seats is not None:
            self.heated_seats = heated_seats
        if high_beam is not None:
            self.high_beam = high_beam
        if infotainment is not None:
            self.infotainment = infotainment
        if infotainment_volume is not None:
            self.infotainment_volume = infotainment_volume
        if location is not None:
            self.location = location
        if mileage is not None:
            self.mileage = mileage
        if motor_control_lamp is not None:
            self.motor_control_lamp = motor_control_lamp
        if person_count is not None:
            self.person_count = person_count
        if pulse_sensor_steering_wheel is not None:
            self.pulse_sensor_steering_wheel = pulse_sensor_steering_wheel
        if power_consumption is not None:
            self.power_consumption = power_consumption
        if rain_sensor is not None:
            self.rain_sensor = rain_sensor
        if rear_running_lights is not None:
            self.rear_running_lights = rear_running_lights
        if side_lights is not None:
            self.side_lights = side_lights
        if speed is not None:
            self.speed = speed
        if stop_lights is not None:
            self.stop_lights = stop_lights
        if temperature_inside is not None:
            self.temperature_inside = temperature_inside
        if temperature_outside is not None:
            self.temperature_outside = temperature_outside
        if tire_pressure_back_left is not None:
            self.tire_pressure_back_left = tire_pressure_back_left
        if tire_pressure_back_right is not None:
            self.tire_pressure_back_right = tire_pressure_back_right
        if tire_pressure_front_left is not None:
            self.tire_pressure_front_left = tire_pressure_front_left
        if tire_pressure_front_right is not None:
            self.tire_pressure_front_right = tire_pressure_front_right
        if trunk is not None:
            self.trunk = trunk
        if turn_signal_left is not None:
            self.turn_signal_left = turn_signal_left
        if turn_signal_right is not None:
            self.turn_signal_right = turn_signal_right
        if warning_blinker is not None:
            self.warning_blinker = warning_blinker
        if weight is not None:
            self.weight = weight
        if windshield_wipers is not None:
            self.windshield_wipers = windshield_wipers
        if wiping_water_level is not None:
            self.wiping_water_level = wiping_water_level

    @property
    def brake_fluid_level(self):
        """Gets the brake_fluid_level of this VehicleSignalListResponseData.  # noqa: E501


        :return: The brake_fluid_level of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._brake_fluid_level

    @brake_fluid_level.setter
    def brake_fluid_level(self, brake_fluid_level):
        """Sets the brake_fluid_level of this VehicleSignalListResponseData.


        :param brake_fluid_level: The brake_fluid_level of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if brake_fluid_level is not None and brake_fluid_level > 100:  # noqa: E501
            raise ValueError("Invalid value for `brake_fluid_level`, must be a value less than or equal to `100`")  # noqa: E501
        if brake_fluid_level is not None and brake_fluid_level < 0:  # noqa: E501
            raise ValueError("Invalid value for `brake_fluid_level`, must be a value greater than or equal to `0`")  # noqa: E501

        self._brake_fluid_level = brake_fluid_level

    @property
    def battery_charging(self):
        """Gets the battery_charging of this VehicleSignalListResponseData.  # noqa: E501


        :return: The battery_charging of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: YesOrNo
        """
        return self._battery_charging

    @battery_charging.setter
    def battery_charging(self, battery_charging):
        """Sets the battery_charging of this VehicleSignalListResponseData.


        :param battery_charging: The battery_charging of this VehicleSignalListResponseData.  # noqa: E501
        :type: YesOrNo
        """

        self._battery_charging = battery_charging

    @property
    def battery_charging_current(self):
        """Gets the battery_charging_current of this VehicleSignalListResponseData.  # noqa: E501


        :return: The battery_charging_current of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._battery_charging_current

    @battery_charging_current.setter
    def battery_charging_current(self, battery_charging_current):
        """Sets the battery_charging_current of this VehicleSignalListResponseData.


        :param battery_charging_current: The battery_charging_current of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if battery_charging_current is not None and battery_charging_current < 0:  # noqa: E501
            raise ValueError("Invalid value for `battery_charging_current`, must be a value greater than or equal to `0`")  # noqa: E501

        self._battery_charging_current = battery_charging_current

    @property
    def battery_health(self):
        """Gets the battery_health of this VehicleSignalListResponseData.  # noqa: E501


        :return: The battery_health of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._battery_health

    @battery_health.setter
    def battery_health(self, battery_health):
        """Sets the battery_health of this VehicleSignalListResponseData.


        :param battery_health: The battery_health of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if battery_health is not None and battery_health > 100:  # noqa: E501
            raise ValueError("Invalid value for `battery_health`, must be a value less than or equal to `100`")  # noqa: E501
        if battery_health is not None and battery_health < 0:  # noqa: E501
            raise ValueError("Invalid value for `battery_health`, must be a value greater than or equal to `0`")  # noqa: E501

        self._battery_health = battery_health

    @property
    def battery_loading_capacity(self):
        """Gets the battery_loading_capacity of this VehicleSignalListResponseData.  # noqa: E501


        :return: The battery_loading_capacity of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._battery_loading_capacity

    @battery_loading_capacity.setter
    def battery_loading_capacity(self, battery_loading_capacity):
        """Sets the battery_loading_capacity of this VehicleSignalListResponseData.


        :param battery_loading_capacity: The battery_loading_capacity of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if battery_loading_capacity is not None and battery_loading_capacity < 0:  # noqa: E501
            raise ValueError("Invalid value for `battery_loading_capacity`, must be a value greater than or equal to `0`")  # noqa: E501

        self._battery_loading_capacity = battery_loading_capacity

    @property
    def battery_state_of_charge(self):
        """Gets the battery_state_of_charge of this VehicleSignalListResponseData.  # noqa: E501


        :return: The battery_state_of_charge of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._battery_state_of_charge

    @battery_state_of_charge.setter
    def battery_state_of_charge(self, battery_state_of_charge):
        """Sets the battery_state_of_charge of this VehicleSignalListResponseData.


        :param battery_state_of_charge: The battery_state_of_charge of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if battery_state_of_charge is not None and battery_state_of_charge > 100:  # noqa: E501
            raise ValueError("Invalid value for `battery_state_of_charge`, must be a value less than or equal to `100`")  # noqa: E501
        if battery_state_of_charge is not None and battery_state_of_charge < 0:  # noqa: E501
            raise ValueError("Invalid value for `battery_state_of_charge`, must be a value greater than or equal to `0`")  # noqa: E501

        self._battery_state_of_charge = battery_state_of_charge

    @property
    def calculated_remaining_distance(self):
        """Gets the calculated_remaining_distance of this VehicleSignalListResponseData.  # noqa: E501


        :return: The calculated_remaining_distance of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._calculated_remaining_distance

    @calculated_remaining_distance.setter
    def calculated_remaining_distance(self, calculated_remaining_distance):
        """Sets the calculated_remaining_distance of this VehicleSignalListResponseData.


        :param calculated_remaining_distance: The calculated_remaining_distance of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if calculated_remaining_distance is not None and calculated_remaining_distance < 0:  # noqa: E501
            raise ValueError("Invalid value for `calculated_remaining_distance`, must be a value greater than or equal to `0`")  # noqa: E501

        self._calculated_remaining_distance = calculated_remaining_distance

    @property
    def central_locking_system(self):
        """Gets the central_locking_system of this VehicleSignalListResponseData.  # noqa: E501


        :return: The central_locking_system of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: OpenStatus
        """
        return self._central_locking_system

    @central_locking_system.setter
    def central_locking_system(self, central_locking_system):
        """Sets the central_locking_system of this VehicleSignalListResponseData.


        :param central_locking_system: The central_locking_system of this VehicleSignalListResponseData.  # noqa: E501
        :type: OpenStatus
        """

        self._central_locking_system = central_locking_system

    @property
    def distance_to_object_back(self):
        """Gets the distance_to_object_back of this VehicleSignalListResponseData.  # noqa: E501


        :return: The distance_to_object_back of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._distance_to_object_back

    @distance_to_object_back.setter
    def distance_to_object_back(self, distance_to_object_back):
        """Sets the distance_to_object_back of this VehicleSignalListResponseData.


        :param distance_to_object_back: The distance_to_object_back of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if distance_to_object_back is not None and distance_to_object_back < 0:  # noqa: E501
            raise ValueError("Invalid value for `distance_to_object_back`, must be a value greater than or equal to `0`")  # noqa: E501

        self._distance_to_object_back = distance_to_object_back

    @property
    def distance_to_object_bottom(self):
        """Gets the distance_to_object_bottom of this VehicleSignalListResponseData.  # noqa: E501


        :return: The distance_to_object_bottom of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._distance_to_object_bottom

    @distance_to_object_bottom.setter
    def distance_to_object_bottom(self, distance_to_object_bottom):
        """Sets the distance_to_object_bottom of this VehicleSignalListResponseData.


        :param distance_to_object_bottom: The distance_to_object_bottom of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if distance_to_object_bottom is not None and distance_to_object_bottom < 0:  # noqa: E501
            raise ValueError("Invalid value for `distance_to_object_bottom`, must be a value greater than or equal to `0`")  # noqa: E501

        self._distance_to_object_bottom = distance_to_object_bottom

    @property
    def distance_to_object_front(self):
        """Gets the distance_to_object_front of this VehicleSignalListResponseData.  # noqa: E501


        :return: The distance_to_object_front of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._distance_to_object_front

    @distance_to_object_front.setter
    def distance_to_object_front(self, distance_to_object_front):
        """Sets the distance_to_object_front of this VehicleSignalListResponseData.


        :param distance_to_object_front: The distance_to_object_front of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if distance_to_object_front is not None and distance_to_object_front < 0:  # noqa: E501
            raise ValueError("Invalid value for `distance_to_object_front`, must be a value greater than or equal to `0`")  # noqa: E501

        self._distance_to_object_front = distance_to_object_front

    @property
    def distance_to_object_left(self):
        """Gets the distance_to_object_left of this VehicleSignalListResponseData.  # noqa: E501


        :return: The distance_to_object_left of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._distance_to_object_left

    @distance_to_object_left.setter
    def distance_to_object_left(self, distance_to_object_left):
        """Sets the distance_to_object_left of this VehicleSignalListResponseData.


        :param distance_to_object_left: The distance_to_object_left of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if distance_to_object_left is not None and distance_to_object_left < 0:  # noqa: E501
            raise ValueError("Invalid value for `distance_to_object_left`, must be a value greater than or equal to `0`")  # noqa: E501

        self._distance_to_object_left = distance_to_object_left

    @property
    def distance_to_object_right(self):
        """Gets the distance_to_object_right of this VehicleSignalListResponseData.  # noqa: E501


        :return: The distance_to_object_right of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._distance_to_object_right

    @distance_to_object_right.setter
    def distance_to_object_right(self, distance_to_object_right):
        """Sets the distance_to_object_right of this VehicleSignalListResponseData.


        :param distance_to_object_right: The distance_to_object_right of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if distance_to_object_right is not None and distance_to_object_right < 0:  # noqa: E501
            raise ValueError("Invalid value for `distance_to_object_right`, must be a value greater than or equal to `0`")  # noqa: E501

        self._distance_to_object_right = distance_to_object_right

    @property
    def distance_trip(self):
        """Gets the distance_trip of this VehicleSignalListResponseData.  # noqa: E501


        :return: The distance_trip of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._distance_trip

    @distance_trip.setter
    def distance_trip(self, distance_trip):
        """Sets the distance_trip of this VehicleSignalListResponseData.


        :param distance_trip: The distance_trip of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if distance_trip is not None and distance_trip < 0:  # noqa: E501
            raise ValueError("Invalid value for `distance_trip`, must be a value greater than or equal to `0`")  # noqa: E501

        self._distance_trip = distance_trip

    @property
    def door_disc_front_left(self):
        """Gets the door_disc_front_left of this VehicleSignalListResponseData.  # noqa: E501


        :return: The door_disc_front_left of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: OpenStatus
        """
        return self._door_disc_front_left

    @door_disc_front_left.setter
    def door_disc_front_left(self, door_disc_front_left):
        """Sets the door_disc_front_left of this VehicleSignalListResponseData.


        :param door_disc_front_left: The door_disc_front_left of this VehicleSignalListResponseData.  # noqa: E501
        :type: OpenStatus
        """

        self._door_disc_front_left = door_disc_front_left

    @property
    def door_disc_front_right(self):
        """Gets the door_disc_front_right of this VehicleSignalListResponseData.  # noqa: E501


        :return: The door_disc_front_right of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: OpenStatus
        """
        return self._door_disc_front_right

    @door_disc_front_right.setter
    def door_disc_front_right(self, door_disc_front_right):
        """Sets the door_disc_front_right of this VehicleSignalListResponseData.


        :param door_disc_front_right: The door_disc_front_right of this VehicleSignalListResponseData.  # noqa: E501
        :type: OpenStatus
        """

        self._door_disc_front_right = door_disc_front_right

    @property
    def door_front_left(self):
        """Gets the door_front_left of this VehicleSignalListResponseData.  # noqa: E501


        :return: The door_front_left of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: OpenStatus
        """
        return self._door_front_left

    @door_front_left.setter
    def door_front_left(self, door_front_left):
        """Sets the door_front_left of this VehicleSignalListResponseData.


        :param door_front_left: The door_front_left of this VehicleSignalListResponseData.  # noqa: E501
        :type: OpenStatus
        """

        self._door_front_left = door_front_left

    @property
    def door_front_right(self):
        """Gets the door_front_right of this VehicleSignalListResponseData.  # noqa: E501


        :return: The door_front_right of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: OpenStatus
        """
        return self._door_front_right

    @door_front_right.setter
    def door_front_right(self, door_front_right):
        """Sets the door_front_right of this VehicleSignalListResponseData.


        :param door_front_right: The door_front_right of this VehicleSignalListResponseData.  # noqa: E501
        :type: OpenStatus
        """

        self._door_front_right = door_front_right

    @property
    def drive_mode(self):
        """Gets the drive_mode of this VehicleSignalListResponseData.  # noqa: E501


        :return: The drive_mode of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: str
        """
        return self._drive_mode

    @drive_mode.setter
    def drive_mode(self, drive_mode):
        """Sets the drive_mode of this VehicleSignalListResponseData.


        :param drive_mode: The drive_mode of this VehicleSignalListResponseData.  # noqa: E501
        :type: str
        """
        allowed_values = ["comfort", "eco", "sport"]  # noqa: E501
        if drive_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `drive_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(drive_mode, allowed_values)
            )

        self._drive_mode = drive_mode

    @property
    def flash(self):
        """Gets the flash of this VehicleSignalListResponseData.  # noqa: E501


        :return: The flash of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: OnOffStatus
        """
        return self._flash

    @flash.setter
    def flash(self, flash):
        """Sets the flash of this VehicleSignalListResponseData.


        :param flash: The flash of this VehicleSignalListResponseData.  # noqa: E501
        :type: OnOffStatus
        """

        self._flash = flash

    @property
    def heated_seats(self):
        """Gets the heated_seats of this VehicleSignalListResponseData.  # noqa: E501


        :return: The heated_seats of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: OnOffStatus
        """
        return self._heated_seats

    @heated_seats.setter
    def heated_seats(self, heated_seats):
        """Sets the heated_seats of this VehicleSignalListResponseData.


        :param heated_seats: The heated_seats of this VehicleSignalListResponseData.  # noqa: E501
        :type: OnOffStatus
        """

        self._heated_seats = heated_seats

    @property
    def high_beam(self):
        """Gets the high_beam of this VehicleSignalListResponseData.  # noqa: E501


        :return: The high_beam of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: OnOffStatus
        """
        return self._high_beam

    @high_beam.setter
    def high_beam(self, high_beam):
        """Sets the high_beam of this VehicleSignalListResponseData.


        :param high_beam: The high_beam of this VehicleSignalListResponseData.  # noqa: E501
        :type: OnOffStatus
        """

        self._high_beam = high_beam

    @property
    def infotainment(self):
        """Gets the infotainment of this VehicleSignalListResponseData.  # noqa: E501


        :return: The infotainment of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: OnOffStatus
        """
        return self._infotainment

    @infotainment.setter
    def infotainment(self, infotainment):
        """Sets the infotainment of this VehicleSignalListResponseData.


        :param infotainment: The infotainment of this VehicleSignalListResponseData.  # noqa: E501
        :type: OnOffStatus
        """

        self._infotainment = infotainment

    @property
    def infotainment_volume(self):
        """Gets the infotainment_volume of this VehicleSignalListResponseData.  # noqa: E501


        :return: The infotainment_volume of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._infotainment_volume

    @infotainment_volume.setter
    def infotainment_volume(self, infotainment_volume):
        """Sets the infotainment_volume of this VehicleSignalListResponseData.


        :param infotainment_volume: The infotainment_volume of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if infotainment_volume is not None and infotainment_volume > 0:  # noqa: E501
            raise ValueError("Invalid value for `infotainment_volume`, must be a value less than or equal to `0`")  # noqa: E501
        if infotainment_volume is not None and infotainment_volume < 0:  # noqa: E501
            raise ValueError("Invalid value for `infotainment_volume`, must be a value greater than or equal to `0`")  # noqa: E501

        self._infotainment_volume = infotainment_volume

    @property
    def location(self):
        """Gets the location of this VehicleSignalListResponseData.  # noqa: E501


        :return: The location of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this VehicleSignalListResponseData.


        :param location: The location of this VehicleSignalListResponseData.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def mileage(self):
        """Gets the mileage of this VehicleSignalListResponseData.  # noqa: E501


        :return: The mileage of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._mileage

    @mileage.setter
    def mileage(self, mileage):
        """Sets the mileage of this VehicleSignalListResponseData.


        :param mileage: The mileage of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if mileage is not None and mileage < 0:  # noqa: E501
            raise ValueError("Invalid value for `mileage`, must be a value greater than or equal to `0`")  # noqa: E501

        self._mileage = mileage

    @property
    def motor_control_lamp(self):
        """Gets the motor_control_lamp of this VehicleSignalListResponseData.  # noqa: E501


        :return: The motor_control_lamp of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: OnOffStatus
        """
        return self._motor_control_lamp

    @motor_control_lamp.setter
    def motor_control_lamp(self, motor_control_lamp):
        """Sets the motor_control_lamp of this VehicleSignalListResponseData.


        :param motor_control_lamp: The motor_control_lamp of this VehicleSignalListResponseData.  # noqa: E501
        :type: OnOffStatus
        """

        self._motor_control_lamp = motor_control_lamp

    @property
    def person_count(self):
        """Gets the person_count of this VehicleSignalListResponseData.  # noqa: E501


        :return: The person_count of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._person_count

    @person_count.setter
    def person_count(self, person_count):
        """Sets the person_count of this VehicleSignalListResponseData.


        :param person_count: The person_count of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if person_count is not None and person_count > 0:  # noqa: E501
            raise ValueError("Invalid value for `person_count`, must be a value less than or equal to `0`")  # noqa: E501
        if person_count is not None and person_count < 0:  # noqa: E501
            raise ValueError("Invalid value for `person_count`, must be a value greater than or equal to `0`")  # noqa: E501

        self._person_count = person_count

    @property
    def pulse_sensor_steering_wheel(self):
        """Gets the pulse_sensor_steering_wheel of this VehicleSignalListResponseData.  # noqa: E501


        :return: The pulse_sensor_steering_wheel of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._pulse_sensor_steering_wheel

    @pulse_sensor_steering_wheel.setter
    def pulse_sensor_steering_wheel(self, pulse_sensor_steering_wheel):
        """Sets the pulse_sensor_steering_wheel of this VehicleSignalListResponseData.


        :param pulse_sensor_steering_wheel: The pulse_sensor_steering_wheel of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if pulse_sensor_steering_wheel is not None and pulse_sensor_steering_wheel > 300:  # noqa: E501
            raise ValueError("Invalid value for `pulse_sensor_steering_wheel`, must be a value less than or equal to `300`")  # noqa: E501
        if pulse_sensor_steering_wheel is not None and pulse_sensor_steering_wheel < 0:  # noqa: E501
            raise ValueError("Invalid value for `pulse_sensor_steering_wheel`, must be a value greater than or equal to `0`")  # noqa: E501

        self._pulse_sensor_steering_wheel = pulse_sensor_steering_wheel

    @property
    def power_consumption(self):
        """Gets the power_consumption of this VehicleSignalListResponseData.  # noqa: E501


        :return: The power_consumption of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._power_consumption

    @power_consumption.setter
    def power_consumption(self, power_consumption):
        """Sets the power_consumption of this VehicleSignalListResponseData.


        :param power_consumption: The power_consumption of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if power_consumption is not None and power_consumption > 40:  # noqa: E501
            raise ValueError("Invalid value for `power_consumption`, must be a value less than or equal to `40`")  # noqa: E501
        if power_consumption is not None and power_consumption < 0:  # noqa: E501
            raise ValueError("Invalid value for `power_consumption`, must be a value greater than or equal to `0`")  # noqa: E501

        self._power_consumption = power_consumption

    @property
    def rain_sensor(self):
        """Gets the rain_sensor of this VehicleSignalListResponseData.  # noqa: E501


        :return: The rain_sensor of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: str
        """
        return self._rain_sensor

    @rain_sensor.setter
    def rain_sensor(self, rain_sensor):
        """Sets the rain_sensor of this VehicleSignalListResponseData.


        :param rain_sensor: The rain_sensor of this VehicleSignalListResponseData.  # noqa: E501
        :type: str
        """
        allowed_values = ["no_rain", "rain"]  # noqa: E501
        if rain_sensor not in allowed_values:
            raise ValueError(
                "Invalid value for `rain_sensor` ({0}), must be one of {1}"  # noqa: E501
                .format(rain_sensor, allowed_values)
            )

        self._rain_sensor = rain_sensor

    @property
    def rear_running_lights(self):
        """Gets the rear_running_lights of this VehicleSignalListResponseData.  # noqa: E501


        :return: The rear_running_lights of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: OnOffStatus
        """
        return self._rear_running_lights

    @rear_running_lights.setter
    def rear_running_lights(self, rear_running_lights):
        """Sets the rear_running_lights of this VehicleSignalListResponseData.


        :param rear_running_lights: The rear_running_lights of this VehicleSignalListResponseData.  # noqa: E501
        :type: OnOffStatus
        """

        self._rear_running_lights = rear_running_lights

    @property
    def side_lights(self):
        """Gets the side_lights of this VehicleSignalListResponseData.  # noqa: E501


        :return: The side_lights of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: OnOffStatus
        """
        return self._side_lights

    @side_lights.setter
    def side_lights(self, side_lights):
        """Sets the side_lights of this VehicleSignalListResponseData.


        :param side_lights: The side_lights of this VehicleSignalListResponseData.  # noqa: E501
        :type: OnOffStatus
        """

        self._side_lights = side_lights

    @property
    def speed(self):
        """Gets the speed of this VehicleSignalListResponseData.  # noqa: E501


        :return: The speed of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this VehicleSignalListResponseData.


        :param speed: The speed of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if speed is not None and speed > 59:  # noqa: E501
            raise ValueError("Invalid value for `speed`, must be a value less than or equal to `59`")  # noqa: E501

        self._speed = speed

    @property
    def stop_lights(self):
        """Gets the stop_lights of this VehicleSignalListResponseData.  # noqa: E501


        :return: The stop_lights of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: OnOffStatus
        """
        return self._stop_lights

    @stop_lights.setter
    def stop_lights(self, stop_lights):
        """Sets the stop_lights of this VehicleSignalListResponseData.


        :param stop_lights: The stop_lights of this VehicleSignalListResponseData.  # noqa: E501
        :type: OnOffStatus
        """

        self._stop_lights = stop_lights

    @property
    def temperature_inside(self):
        """Gets the temperature_inside of this VehicleSignalListResponseData.  # noqa: E501


        :return: The temperature_inside of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._temperature_inside

    @temperature_inside.setter
    def temperature_inside(self, temperature_inside):
        """Sets the temperature_inside of this VehicleSignalListResponseData.


        :param temperature_inside: The temperature_inside of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if temperature_inside is not None and temperature_inside > 100:  # noqa: E501
            raise ValueError("Invalid value for `temperature_inside`, must be a value less than or equal to `100`")  # noqa: E501
        if temperature_inside is not None and temperature_inside < -100:  # noqa: E501
            raise ValueError("Invalid value for `temperature_inside`, must be a value greater than or equal to `-100`")  # noqa: E501

        self._temperature_inside = temperature_inside

    @property
    def temperature_outside(self):
        """Gets the temperature_outside of this VehicleSignalListResponseData.  # noqa: E501


        :return: The temperature_outside of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._temperature_outside

    @temperature_outside.setter
    def temperature_outside(self, temperature_outside):
        """Sets the temperature_outside of this VehicleSignalListResponseData.


        :param temperature_outside: The temperature_outside of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if temperature_outside is not None and temperature_outside > 100:  # noqa: E501
            raise ValueError("Invalid value for `temperature_outside`, must be a value less than or equal to `100`")  # noqa: E501
        if temperature_outside is not None and temperature_outside < -100:  # noqa: E501
            raise ValueError("Invalid value for `temperature_outside`, must be a value greater than or equal to `-100`")  # noqa: E501

        self._temperature_outside = temperature_outside

    @property
    def tire_pressure_back_left(self):
        """Gets the tire_pressure_back_left of this VehicleSignalListResponseData.  # noqa: E501


        :return: The tire_pressure_back_left of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._tire_pressure_back_left

    @tire_pressure_back_left.setter
    def tire_pressure_back_left(self, tire_pressure_back_left):
        """Sets the tire_pressure_back_left of this VehicleSignalListResponseData.


        :param tire_pressure_back_left: The tire_pressure_back_left of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if tire_pressure_back_left is not None and tire_pressure_back_left > 5:  # noqa: E501
            raise ValueError("Invalid value for `tire_pressure_back_left`, must be a value less than or equal to `5`")  # noqa: E501
        if tire_pressure_back_left is not None and tire_pressure_back_left < 0:  # noqa: E501
            raise ValueError("Invalid value for `tire_pressure_back_left`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tire_pressure_back_left = tire_pressure_back_left

    @property
    def tire_pressure_back_right(self):
        """Gets the tire_pressure_back_right of this VehicleSignalListResponseData.  # noqa: E501


        :return: The tire_pressure_back_right of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._tire_pressure_back_right

    @tire_pressure_back_right.setter
    def tire_pressure_back_right(self, tire_pressure_back_right):
        """Sets the tire_pressure_back_right of this VehicleSignalListResponseData.


        :param tire_pressure_back_right: The tire_pressure_back_right of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if tire_pressure_back_right is not None and tire_pressure_back_right > 5:  # noqa: E501
            raise ValueError("Invalid value for `tire_pressure_back_right`, must be a value less than or equal to `5`")  # noqa: E501
        if tire_pressure_back_right is not None and tire_pressure_back_right < 0:  # noqa: E501
            raise ValueError("Invalid value for `tire_pressure_back_right`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tire_pressure_back_right = tire_pressure_back_right

    @property
    def tire_pressure_front_left(self):
        """Gets the tire_pressure_front_left of this VehicleSignalListResponseData.  # noqa: E501


        :return: The tire_pressure_front_left of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._tire_pressure_front_left

    @tire_pressure_front_left.setter
    def tire_pressure_front_left(self, tire_pressure_front_left):
        """Sets the tire_pressure_front_left of this VehicleSignalListResponseData.


        :param tire_pressure_front_left: The tire_pressure_front_left of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if tire_pressure_front_left is not None and tire_pressure_front_left > 5:  # noqa: E501
            raise ValueError("Invalid value for `tire_pressure_front_left`, must be a value less than or equal to `5`")  # noqa: E501
        if tire_pressure_front_left is not None and tire_pressure_front_left < 0:  # noqa: E501
            raise ValueError("Invalid value for `tire_pressure_front_left`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tire_pressure_front_left = tire_pressure_front_left

    @property
    def tire_pressure_front_right(self):
        """Gets the tire_pressure_front_right of this VehicleSignalListResponseData.  # noqa: E501


        :return: The tire_pressure_front_right of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._tire_pressure_front_right

    @tire_pressure_front_right.setter
    def tire_pressure_front_right(self, tire_pressure_front_right):
        """Sets the tire_pressure_front_right of this VehicleSignalListResponseData.


        :param tire_pressure_front_right: The tire_pressure_front_right of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if tire_pressure_front_right is not None and tire_pressure_front_right > 5:  # noqa: E501
            raise ValueError("Invalid value for `tire_pressure_front_right`, must be a value less than or equal to `5`")  # noqa: E501
        if tire_pressure_front_right is not None and tire_pressure_front_right < 0:  # noqa: E501
            raise ValueError("Invalid value for `tire_pressure_front_right`, must be a value greater than or equal to `0`")  # noqa: E501

        self._tire_pressure_front_right = tire_pressure_front_right

    @property
    def trunk(self):
        """Gets the trunk of this VehicleSignalListResponseData.  # noqa: E501


        :return: The trunk of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: OpenStatus
        """
        return self._trunk

    @trunk.setter
    def trunk(self, trunk):
        """Sets the trunk of this VehicleSignalListResponseData.


        :param trunk: The trunk of this VehicleSignalListResponseData.  # noqa: E501
        :type: OpenStatus
        """

        self._trunk = trunk

    @property
    def turn_signal_left(self):
        """Gets the turn_signal_left of this VehicleSignalListResponseData.  # noqa: E501


        :return: The turn_signal_left of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: OnOffStatus
        """
        return self._turn_signal_left

    @turn_signal_left.setter
    def turn_signal_left(self, turn_signal_left):
        """Sets the turn_signal_left of this VehicleSignalListResponseData.


        :param turn_signal_left: The turn_signal_left of this VehicleSignalListResponseData.  # noqa: E501
        :type: OnOffStatus
        """

        self._turn_signal_left = turn_signal_left

    @property
    def turn_signal_right(self):
        """Gets the turn_signal_right of this VehicleSignalListResponseData.  # noqa: E501


        :return: The turn_signal_right of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: OnOffStatus
        """
        return self._turn_signal_right

    @turn_signal_right.setter
    def turn_signal_right(self, turn_signal_right):
        """Sets the turn_signal_right of this VehicleSignalListResponseData.


        :param turn_signal_right: The turn_signal_right of this VehicleSignalListResponseData.  # noqa: E501
        :type: OnOffStatus
        """

        self._turn_signal_right = turn_signal_right

    @property
    def warning_blinker(self):
        """Gets the warning_blinker of this VehicleSignalListResponseData.  # noqa: E501


        :return: The warning_blinker of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: OnOffStatus
        """
        return self._warning_blinker

    @warning_blinker.setter
    def warning_blinker(self, warning_blinker):
        """Sets the warning_blinker of this VehicleSignalListResponseData.


        :param warning_blinker: The warning_blinker of this VehicleSignalListResponseData.  # noqa: E501
        :type: OnOffStatus
        """

        self._warning_blinker = warning_blinker

    @property
    def weight(self):
        """Gets the weight of this VehicleSignalListResponseData.  # noqa: E501


        :return: The weight of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this VehicleSignalListResponseData.


        :param weight: The weight of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if weight is not None and weight > 3500:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value less than or equal to `3500`")  # noqa: E501
        if weight is not None and weight < 1200:  # noqa: E501
            raise ValueError("Invalid value for `weight`, must be a value greater than or equal to `1200`")  # noqa: E501

        self._weight = weight

    @property
    def windshield_wipers(self):
        """Gets the windshield_wipers of this VehicleSignalListResponseData.  # noqa: E501


        :return: The windshield_wipers of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: OnOffStatus
        """
        return self._windshield_wipers

    @windshield_wipers.setter
    def windshield_wipers(self, windshield_wipers):
        """Sets the windshield_wipers of this VehicleSignalListResponseData.


        :param windshield_wipers: The windshield_wipers of this VehicleSignalListResponseData.  # noqa: E501
        :type: OnOffStatus
        """

        self._windshield_wipers = windshield_wipers

    @property
    def wiping_water_level(self):
        """Gets the wiping_water_level of this VehicleSignalListResponseData.  # noqa: E501


        :return: The wiping_water_level of this VehicleSignalListResponseData.  # noqa: E501
        :rtype: float
        """
        return self._wiping_water_level

    @wiping_water_level.setter
    def wiping_water_level(self, wiping_water_level):
        """Sets the wiping_water_level of this VehicleSignalListResponseData.


        :param wiping_water_level: The wiping_water_level of this VehicleSignalListResponseData.  # noqa: E501
        :type: float
        """
        if wiping_water_level is not None and wiping_water_level > 100:  # noqa: E501
            raise ValueError("Invalid value for `wiping_water_level`, must be a value less than or equal to `100`")  # noqa: E501
        if wiping_water_level is not None and wiping_water_level < 0:  # noqa: E501
            raise ValueError("Invalid value for `wiping_water_level`, must be a value greater than or equal to `0`")  # noqa: E501

        self._wiping_water_level = wiping_water_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VehicleSignalListResponseData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleSignalListResponseData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
