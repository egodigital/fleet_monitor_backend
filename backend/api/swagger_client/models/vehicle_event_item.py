# coding: utf-8

"""
    Vehicle Booking API by e.GO Digital 

    Describes all backend endpoints.  # noqa: E501

    OpenAPI spec version: 2.0.5
    Contact: hello@e-go-digital.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VehicleEventItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creation_time': 'str',
        'data': 'object',
        'id': 'str',
        'is_handled': 'bool',
        'last_update': 'str',
        'name': 'str',
        'vehicle': 'VehicleItem'
    }

    attribute_map = {
        'creation_time': 'creationTime',
        'data': 'data',
        'id': 'id',
        'is_handled': 'isHandled',
        'last_update': 'lastUpdate',
        'name': 'name',
        'vehicle': 'vehicle'
    }

    def __init__(self, creation_time=None, data=None, id=None, is_handled=None, last_update=None, name=None, vehicle=None):  # noqa: E501
        """VehicleEventItem - a model defined in Swagger"""  # noqa: E501

        self._creation_time = None
        self._data = None
        self._id = None
        self._is_handled = None
        self._last_update = None
        self._name = None
        self._vehicle = None
        self.discriminator = None

        self.creation_time = creation_time
        if data is not None:
            self.data = data
        self.id = id
        self.is_handled = is_handled
        if last_update is not None:
            self.last_update = last_update
        if name is not None:
            self.name = name
        self.vehicle = vehicle

    @property
    def creation_time(self):
        """Gets the creation_time of this VehicleEventItem.  # noqa: E501

        The creation time.  # noqa: E501

        :return: The creation_time of this VehicleEventItem.  # noqa: E501
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this VehicleEventItem.

        The creation time.  # noqa: E501

        :param creation_time: The creation_time of this VehicleEventItem.  # noqa: E501
        :type: str
        """
        if creation_time is None:
            raise ValueError("Invalid value for `creation_time`, must not be `None`")  # noqa: E501

        self._creation_time = creation_time

    @property
    def data(self):
        """Gets the data of this VehicleEventItem.  # noqa: E501

        Event data.  # noqa: E501

        :return: The data of this VehicleEventItem.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this VehicleEventItem.

        Event data.  # noqa: E501

        :param data: The data of this VehicleEventItem.  # noqa: E501
        :type: object
        """

        self._data = data

    @property
    def id(self):
        """Gets the id of this VehicleEventItem.  # noqa: E501

        The ID of the event.  # noqa: E501

        :return: The id of this VehicleEventItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VehicleEventItem.

        The ID of the event.  # noqa: E501

        :param id: The id of this VehicleEventItem.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_handled(self):
        """Gets the is_handled of this VehicleEventItem.  # noqa: E501

        Indicates if the event has been handled or not.  # noqa: E501

        :return: The is_handled of this VehicleEventItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_handled

    @is_handled.setter
    def is_handled(self, is_handled):
        """Sets the is_handled of this VehicleEventItem.

        Indicates if the event has been handled or not.  # noqa: E501

        :param is_handled: The is_handled of this VehicleEventItem.  # noqa: E501
        :type: bool
        """
        if is_handled is None:
            raise ValueError("Invalid value for `is_handled`, must not be `None`")  # noqa: E501

        self._is_handled = is_handled

    @property
    def last_update(self):
        """Gets the last_update of this VehicleEventItem.  # noqa: E501

        The last update timestamp.  # noqa: E501

        :return: The last_update of this VehicleEventItem.  # noqa: E501
        :rtype: str
        """
        return self._last_update

    @last_update.setter
    def last_update(self, last_update):
        """Sets the last_update of this VehicleEventItem.

        The last update timestamp.  # noqa: E501

        :param last_update: The last_update of this VehicleEventItem.  # noqa: E501
        :type: str
        """

        self._last_update = last_update

    @property
    def name(self):
        """Gets the name of this VehicleEventItem.  # noqa: E501

        The name of the event.  # noqa: E501

        :return: The name of this VehicleEventItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VehicleEventItem.

        The name of the event.  # noqa: E501

        :param name: The name of this VehicleEventItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def vehicle(self):
        """Gets the vehicle of this VehicleEventItem.  # noqa: E501

        The underlying vehicle.  # noqa: E501

        :return: The vehicle of this VehicleEventItem.  # noqa: E501
        :rtype: VehicleItem
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """Sets the vehicle of this VehicleEventItem.

        The underlying vehicle.  # noqa: E501

        :param vehicle: The vehicle of this VehicleEventItem.  # noqa: E501
        :type: VehicleItem
        """
        if vehicle is None:
            raise ValueError("Invalid value for `vehicle`, must not be `None`")  # noqa: E501

        self._vehicle = vehicle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VehicleEventItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleEventItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
