# coding: utf-8

"""
    Vehicle Booking API by e.GO Digital 

    Describes all backend endpoints.  # noqa: E501

    OpenAPI spec version: 2.0.5
    Contact: hello@e-go-digital.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class VehicleBookingItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event': 'str',
        '_from': 'str',
        'id': 'str',
        'status': 'str',
        'time': 'str',
        'until': 'str',
        'vehicle': 'VehicleItem'
    }

    attribute_map = {
        'event': 'event',
        '_from': 'from',
        'id': 'id',
        'status': 'status',
        'time': 'time',
        'until': 'until',
        'vehicle': 'vehicle'
    }

    def __init__(self, event=None, _from=None, id=None, status=None, time=None, until=None, vehicle=None):  # noqa: E501
        """VehicleBookingItem - a model defined in Swagger"""  # noqa: E501

        self._event = None
        self.__from = None
        self._id = None
        self._status = None
        self._time = None
        self._until = None
        self._vehicle = None
        self.discriminator = None

        self.event = event
        if _from is not None:
            self._from = _from
        self.id = id
        self.status = status
        self.time = time
        if until is not None:
            self.until = until
        self.vehicle = vehicle

    @property
    def event(self):
        """Gets the event of this VehicleBookingItem.  # noqa: E501

        The event type of the vehicle booking.  # noqa: E501

        :return: The event of this VehicleBookingItem.  # noqa: E501
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this VehicleBookingItem.

        The event type of the vehicle booking.  # noqa: E501

        :param event: The event of this VehicleBookingItem.  # noqa: E501
        :type: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")  # noqa: E501
        allowed_values = ["cancelled", "created", "finished_in_time", "finished_late", "started"]  # noqa: E501
        if event not in allowed_values:
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"  # noqa: E501
                .format(event, allowed_values)
            )

        self._event = event

    @property
    def _from(self):
        """Gets the _from of this VehicleBookingItem.  # noqa: E501

        The timestamp when the vehicle booking starts.  # noqa: E501

        :return: The _from of this VehicleBookingItem.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this VehicleBookingItem.

        The timestamp when the vehicle booking starts.  # noqa: E501

        :param _from: The _from of this VehicleBookingItem.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def id(self):
        """Gets the id of this VehicleBookingItem.  # noqa: E501

        The ID of the vehicle booking.  # noqa: E501

        :return: The id of this VehicleBookingItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VehicleBookingItem.

        The ID of the vehicle booking.  # noqa: E501

        :param id: The id of this VehicleBookingItem.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def status(self):
        """Gets the status of this VehicleBookingItem.  # noqa: E501

        The status of the vehicle booking.  # noqa: E501

        :return: The status of this VehicleBookingItem.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VehicleBookingItem.

        The status of the vehicle booking.  # noqa: E501

        :param status: The status of this VehicleBookingItem.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["active", "cancelled", "finished", "new"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def time(self):
        """Gets the time of this VehicleBookingItem.  # noqa: E501

        The timestamp of the vehicle booking.  # noqa: E501

        :return: The time of this VehicleBookingItem.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this VehicleBookingItem.

        The timestamp of the vehicle booking.  # noqa: E501

        :param time: The time of this VehicleBookingItem.  # noqa: E501
        :type: str
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def until(self):
        """Gets the until of this VehicleBookingItem.  # noqa: E501

        The timestamp when the vehicle booking ends.  # noqa: E501

        :return: The until of this VehicleBookingItem.  # noqa: E501
        :rtype: str
        """
        return self._until

    @until.setter
    def until(self, until):
        """Sets the until of this VehicleBookingItem.

        The timestamp when the vehicle booking ends.  # noqa: E501

        :param until: The until of this VehicleBookingItem.  # noqa: E501
        :type: str
        """

        self._until = until

    @property
    def vehicle(self):
        """Gets the vehicle of this VehicleBookingItem.  # noqa: E501

        The underlying vehicle.  # noqa: E501

        :return: The vehicle of this VehicleBookingItem.  # noqa: E501
        :rtype: VehicleItem
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """Sets the vehicle of this VehicleBookingItem.

        The underlying vehicle.  # noqa: E501

        :param vehicle: The vehicle of this VehicleBookingItem.  # noqa: E501
        :type: VehicleItem
        """
        if vehicle is None:
            raise ValueError("Invalid value for `vehicle`, must not be `None`")  # noqa: E501

        self._vehicle = vehicle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VehicleBookingItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VehicleBookingItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
