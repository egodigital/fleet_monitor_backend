# coding: utf-8

"""
    Vehicle Booking API by e.GO Digital 

    Describes all backend endpoints.  # noqa: E501

    OpenAPI spec version: 2.0.5
    Contact: hello@e-go-digital.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class VehiclesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v2_vehicles_get(self, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of all vehicles.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_get(x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :return: VehicleListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_get_with_http_info(x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_get_with_http_info(x_api_key, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_get_with_http_info(self, x_api_key, **kwargs):  # noqa: E501
        """Returns a list of all vehicles.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_get_with_http_info(x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :return: VehicleListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VehicleListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_post(self, body, x_api_key, **kwargs):  # noqa: E501
        """Creates a new vehicle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_post(body, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateVehicleRequest body: Options for a request. (required)
        :param str x_api_key: The API key. (required)
        :return: CreateVehicleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_post_with_http_info(body, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_post_with_http_info(body, x_api_key, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_post_with_http_info(self, body, x_api_key, **kwargs):  # noqa: E501
        """Creates a new vehicle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_post_with_http_info(body, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateVehicleRequest body: Options for a request. (required)
        :param str x_api_key: The API key. (required)
        :return: CreateVehicleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_vehicles_post`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateVehicleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_vehicle_id_bookings_get(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Returns a list of bookings of a vehicle, with optional filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_bookings_get(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :param str _from: The filter for start date (UTC).
        :param str status: The filter for the status.
        :param str until: The filter for end date (UTC).
        :param str vehicle: The filter for the ID of the vehicle.
        :return: VehicleBookingListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_vehicle_id_bookings_get_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_vehicle_id_bookings_get_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_vehicle_id_bookings_get_with_http_info(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Returns a list of bookings of a vehicle, with optional filters.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_bookings_get_with_http_info(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :param str _from: The filter for start date (UTC).
        :param str status: The filter for the status.
        :param str until: The filter for end date (UTC).
        :param str vehicle: The filter for the ID of the vehicle.
        :return: VehicleBookingListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'vehicle_id', '_from', 'status', 'until', 'vehicle']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_vehicle_id_bookings_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_vehicle_id_bookings_get`")  # noqa: E501
        # verify the required parameter 'vehicle_id' is set
        if ('vehicle_id' not in params or
                params['vehicle_id'] is None):
            raise ValueError("Missing the required parameter `vehicle_id` when calling `api_v2_vehicles_vehicle_id_bookings_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vehicle_id' in params:
            path_params['vehicle_id'] = params['vehicle_id']  # noqa: E501

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501
        if 'vehicle' in params:
            query_params.append(('vehicle', params['vehicle']))  # noqa: E501

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles/{vehicle_id}/bookings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VehicleBookingListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_vehicle_id_bookings_post(self, body, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Creates a new booking for a vehicle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_bookings_post(body, x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateVehicleBookingRequest body: Options for a request. (required)
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: CreateVehicleBookingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_vehicle_id_bookings_post_with_http_info(body, x_api_key, vehicle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_vehicle_id_bookings_post_with_http_info(body, x_api_key, vehicle_id, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_vehicle_id_bookings_post_with_http_info(self, body, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Creates a new booking for a vehicle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_bookings_post_with_http_info(body, x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateVehicleBookingRequest body: Options for a request. (required)
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: CreateVehicleBookingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'x_api_key', 'vehicle_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_vehicle_id_bookings_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v2_vehicles_vehicle_id_bookings_post`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_vehicle_id_bookings_post`")  # noqa: E501
        # verify the required parameter 'vehicle_id' is set
        if ('vehicle_id' not in params or
                params['vehicle_id'] is None):
            raise ValueError("Missing the required parameter `vehicle_id` when calling `api_v2_vehicles_vehicle_id_bookings_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vehicle_id' in params:
            path_params['vehicle_id'] = params['vehicle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles/{vehicle_id}/bookings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateVehicleBookingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_vehicle_id_delete(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Resets the complete vehicle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_delete(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: DeleteVehicleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_vehicle_id_delete_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_vehicle_id_delete_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_vehicle_id_delete_with_http_info(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Resets the complete vehicle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_delete_with_http_info(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: DeleteVehicleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'vehicle_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_vehicle_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_vehicle_id_delete`")  # noqa: E501
        # verify the required parameter 'vehicle_id' is set
        if ('vehicle_id' not in params or
                params['vehicle_id'] is None):
            raise ValueError("Missing the required parameter `vehicle_id` when calling `api_v2_vehicles_vehicle_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vehicle_id' in params:
            path_params['vehicle_id'] = params['vehicle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles/{vehicle_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteVehicleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_vehicle_id_events_delete(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Removes the complete queue of events.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_events_delete(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_vehicle_id_events_delete_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_vehicle_id_events_delete_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_vehicle_id_events_delete_with_http_info(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Removes the complete queue of events.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_events_delete_with_http_info(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'vehicle_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_vehicle_id_events_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_vehicle_id_events_delete`")  # noqa: E501
        # verify the required parameter 'vehicle_id' is set
        if ('vehicle_id' not in params or
                params['vehicle_id'] is None):
            raise ValueError("Missing the required parameter `vehicle_id` when calling `api_v2_vehicles_vehicle_id_events_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vehicle_id' in params:
            path_params['vehicle_id'] = params['vehicle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles/{vehicle_id}/events', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_vehicle_id_events_get(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Gets a list of unhandled events and marks them as handled.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_events_get(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :param str filter: Regex filter for event name (case insensitive).
        :return: VehicleEventListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_vehicle_id_events_get_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_vehicle_id_events_get_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_vehicle_id_events_get_with_http_info(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Gets a list of unhandled events and marks them as handled.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_events_get_with_http_info(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :param str filter: Regex filter for event name (case insensitive).
        :return: VehicleEventListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'vehicle_id', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_vehicle_id_events_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_vehicle_id_events_get`")  # noqa: E501
        # verify the required parameter 'vehicle_id' is set
        if ('vehicle_id' not in params or
                params['vehicle_id'] is None):
            raise ValueError("Missing the required parameter `vehicle_id` when calling `api_v2_vehicles_vehicle_id_events_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vehicle_id' in params:
            path_params['vehicle_id'] = params['vehicle_id']  # noqa: E501

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles/{vehicle_id}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VehicleEventListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_vehicle_id_get(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Returns the information of the vehicle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_get(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: GetVehicleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_vehicle_id_get_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_vehicle_id_get_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_vehicle_id_get_with_http_info(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Returns the information of the vehicle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_get_with_http_info(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: GetVehicleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'vehicle_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_vehicle_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_vehicle_id_get`")  # noqa: E501
        # verify the required parameter 'vehicle_id' is set
        if ('vehicle_id' not in params or
                params['vehicle_id'] is None):
            raise ValueError("Missing the required parameter `vehicle_id` when calling `api_v2_vehicles_vehicle_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vehicle_id' in params:
            path_params['vehicle_id'] = params['vehicle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles/{vehicle_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetVehicleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_vehicle_id_infotainment_delete(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Resets the infotainment screen.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_infotainment_delete(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_vehicle_id_infotainment_delete_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_vehicle_id_infotainment_delete_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_vehicle_id_infotainment_delete_with_http_info(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Resets the infotainment screen.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_infotainment_delete_with_http_info(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'vehicle_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_vehicle_id_infotainment_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_vehicle_id_infotainment_delete`")  # noqa: E501
        # verify the required parameter 'vehicle_id' is set
        if ('vehicle_id' not in params or
                params['vehicle_id'] is None):
            raise ValueError("Missing the required parameter `vehicle_id` when calling `api_v2_vehicles_vehicle_id_infotainment_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vehicle_id' in params:
            path_params['vehicle_id'] = params['vehicle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/png'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles/{vehicle_id}/infotainment', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_vehicle_id_infotainment_get(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Gets the current infotainment screen.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_infotainment_get(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :param float cache: Use cache or not.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_vehicle_id_infotainment_get_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_vehicle_id_infotainment_get_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_vehicle_id_infotainment_get_with_http_info(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Gets the current infotainment screen.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_infotainment_get_with_http_info(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :param float cache: Use cache or not.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'vehicle_id', 'cache']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_vehicle_id_infotainment_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_vehicle_id_infotainment_get`")  # noqa: E501
        # verify the required parameter 'vehicle_id' is set
        if ('vehicle_id' not in params or
                params['vehicle_id'] is None):
            raise ValueError("Missing the required parameter `vehicle_id` when calling `api_v2_vehicles_vehicle_id_infotainment_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vehicle_id' in params:
            path_params['vehicle_id'] = params['vehicle_id']  # noqa: E501

        query_params = []
        if 'cache' in params:
            query_params.append(('cache', params['cache']))  # noqa: E501

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/png'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles/{vehicle_id}/infotainment', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_vehicle_id_infotainment_post(self, x_api_key, image, vehicle_id, **kwargs):  # noqa: E501
        """Sets the data of the screen as image or video.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_infotainment_post(x_api_key, image, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str image: The image to write / insert. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_vehicle_id_infotainment_post_with_http_info(x_api_key, image, vehicle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_vehicle_id_infotainment_post_with_http_info(x_api_key, image, vehicle_id, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_vehicle_id_infotainment_post_with_http_info(self, x_api_key, image, vehicle_id, **kwargs):  # noqa: E501
        """Sets the data of the screen as image or video.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_infotainment_post_with_http_info(x_api_key, image, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str image: The image to write / insert. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'image', 'vehicle_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_vehicle_id_infotainment_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_vehicle_id_infotainment_post`")  # noqa: E501
        # verify the required parameter 'image' is set
        if ('image' not in params or
                params['image'] is None):
            raise ValueError("Missing the required parameter `image` when calling `api_v2_vehicles_vehicle_id_infotainment_post`")  # noqa: E501
        # verify the required parameter 'vehicle_id' is set
        if ('vehicle_id' not in params or
                params['vehicle_id'] is None):
            raise ValueError("Missing the required parameter `vehicle_id` when calling `api_v2_vehicles_vehicle_id_infotainment_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vehicle_id' in params:
            path_params['vehicle_id'] = params['vehicle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'image' in params:
            body_params = params['image']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['image/bmp', 'image/gif', 'image/jpeg', 'image/png', 'image/tiff', 'text/plain', 'video/mp4', 'video/mpeg', 'video/ogg'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles/{vehicle_id}/infotainment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_vehicle_id_infotainment_put(self, image, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Writes an image to the infotainment screen.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_infotainment_put(image, x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image: The image to write / insert. (required)
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :param float x: The x coorinate where to place the image.
        :param float y: The y coorinate where to place the image.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_vehicle_id_infotainment_put_with_http_info(image, x_api_key, vehicle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_vehicle_id_infotainment_put_with_http_info(image, x_api_key, vehicle_id, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_vehicle_id_infotainment_put_with_http_info(self, image, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Writes an image to the infotainment screen.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_infotainment_put_with_http_info(image, x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str image: The image to write / insert. (required)
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :param float x: The x coorinate where to place the image.
        :param float y: The y coorinate where to place the image.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image', 'x_api_key', 'vehicle_id', 'x', 'y']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_vehicle_id_infotainment_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'image' is set
        if ('image' not in params or
                params['image'] is None):
            raise ValueError("Missing the required parameter `image` when calling `api_v2_vehicles_vehicle_id_infotainment_put`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_vehicle_id_infotainment_put`")  # noqa: E501
        # verify the required parameter 'vehicle_id' is set
        if ('vehicle_id' not in params or
                params['vehicle_id'] is None):
            raise ValueError("Missing the required parameter `vehicle_id` when calling `api_v2_vehicles_vehicle_id_infotainment_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vehicle_id' in params:
            path_params['vehicle_id'] = params['vehicle_id']  # noqa: E501

        query_params = []
        if 'x' in params:
            query_params.append(('x', params['x']))  # noqa: E501
        if 'y' in params:
            query_params.append(('y', params['y']))  # noqa: E501

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'image' in params:
            body_params = params['image']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/png'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles/{vehicle_id}/infotainment', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_vehicle_id_infotainment_text_put(self, text, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Writes text to the infotainment system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_infotainment_text_put(text, x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: The text to write / insert. (required)
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :param float black: Indicates if to use black font color or not.
        :param float size: The font size.
        :param float x: The x coorinate where to place the text.
        :param float y: The y coorinate where to place the text.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_vehicle_id_infotainment_text_put_with_http_info(text, x_api_key, vehicle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_vehicle_id_infotainment_text_put_with_http_info(text, x_api_key, vehicle_id, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_vehicle_id_infotainment_text_put_with_http_info(self, text, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Writes text to the infotainment system.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_infotainment_text_put_with_http_info(text, x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str text: The text to write / insert. (required)
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :param float black: Indicates if to use black font color or not.
        :param float size: The font size.
        :param float x: The x coorinate where to place the text.
        :param float y: The y coorinate where to place the text.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['text', 'x_api_key', 'vehicle_id', 'black', 'size', 'x', 'y']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_vehicle_id_infotainment_text_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'text' is set
        if ('text' not in params or
                params['text'] is None):
            raise ValueError("Missing the required parameter `text` when calling `api_v2_vehicles_vehicle_id_infotainment_text_put`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_vehicle_id_infotainment_text_put`")  # noqa: E501
        # verify the required parameter 'vehicle_id' is set
        if ('vehicle_id' not in params or
                params['vehicle_id'] is None):
            raise ValueError("Missing the required parameter `vehicle_id` when calling `api_v2_vehicles_vehicle_id_infotainment_text_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vehicle_id' in params:
            path_params['vehicle_id'] = params['vehicle_id']  # noqa: E501

        query_params = []
        if 'black' in params:
            query_params.append(('black', params['black']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'x' in params:
            query_params.append(('x', params['x']))  # noqa: E501
        if 'y' in params:
            query_params.append(('y', params['y']))  # noqa: E501

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'text' in params:
            body_params = params['text']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/png'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles/{vehicle_id}/infotainment/text', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_vehicle_id_logs_signals_delete(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Deletes all vehicle signal logs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_logs_signals_delete(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_vehicle_id_logs_signals_delete_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_vehicle_id_logs_signals_delete_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_vehicle_id_logs_signals_delete_with_http_info(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Deletes all vehicle signal logs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_logs_signals_delete_with_http_info(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'vehicle_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_vehicle_id_logs_signals_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_vehicle_id_logs_signals_delete`")  # noqa: E501
        # verify the required parameter 'vehicle_id' is set
        if ('vehicle_id' not in params or
                params['vehicle_id'] is None):
            raise ValueError("Missing the required parameter `vehicle_id` when calling `api_v2_vehicles_vehicle_id_logs_signals_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vehicle_id' in params:
            path_params['vehicle_id'] = params['vehicle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles/{vehicle_id}/logs/signals', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_vehicle_id_logs_signals_get(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Gets vehicle signal logs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_logs_signals_get(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :param float limit: The maximum number of results.
        :param float offset: The zero based offset.
        :param str sort: Sort order.
        :param str filter: Regex filter for signal name (case insensitive).
        :return: VehicleSignalLogListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_vehicle_id_logs_signals_get_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_vehicle_id_logs_signals_get_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_vehicle_id_logs_signals_get_with_http_info(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Gets vehicle signal logs.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_logs_signals_get_with_http_info(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :param float limit: The maximum number of results.
        :param float offset: The zero based offset.
        :param str sort: Sort order.
        :param str filter: Regex filter for signal name (case insensitive).
        :return: VehicleSignalLogListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'vehicle_id', 'limit', 'offset', 'sort', 'filter']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_vehicle_id_logs_signals_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_vehicle_id_logs_signals_get`")  # noqa: E501
        # verify the required parameter 'vehicle_id' is set
        if ('vehicle_id' not in params or
                params['vehicle_id'] is None):
            raise ValueError("Missing the required parameter `vehicle_id` when calling `api_v2_vehicles_vehicle_id_logs_signals_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vehicle_id' in params:
            path_params['vehicle_id'] = params['vehicle_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles/{vehicle_id}/logs/signals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VehicleSignalLogListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_vehicle_id_patch(self, update_vehicle_options, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Updates a vehicle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_patch(update_vehicle_options, x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateVehicleRequest update_vehicle_options: The data to update. (required)
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: UpdateVehicleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_vehicle_id_patch_with_http_info(update_vehicle_options, x_api_key, vehicle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_vehicle_id_patch_with_http_info(update_vehicle_options, x_api_key, vehicle_id, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_vehicle_id_patch_with_http_info(self, update_vehicle_options, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Updates a vehicle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_patch_with_http_info(update_vehicle_options, x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateVehicleRequest update_vehicle_options: The data to update. (required)
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: UpdateVehicleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['update_vehicle_options', 'x_api_key', 'vehicle_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_vehicle_id_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'update_vehicle_options' is set
        if ('update_vehicle_options' not in params or
                params['update_vehicle_options'] is None):
            raise ValueError("Missing the required parameter `update_vehicle_options` when calling `api_v2_vehicles_vehicle_id_patch`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_vehicle_id_patch`")  # noqa: E501
        # verify the required parameter 'vehicle_id' is set
        if ('vehicle_id' not in params or
                params['vehicle_id'] is None):
            raise ValueError("Missing the required parameter `vehicle_id` when calling `api_v2_vehicles_vehicle_id_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vehicle_id' in params:
            path_params['vehicle_id'] = params['vehicle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_vehicle_options' in params:
            body_params = params['update_vehicle_options']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles/{vehicle_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateVehicleResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_vehicle_id_signals_delete(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Resets all signals.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_signals_delete(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: VehicleSignalListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_vehicle_id_signals_delete_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_vehicle_id_signals_delete_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_vehicle_id_signals_delete_with_http_info(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Resets all signals.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_signals_delete_with_http_info(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: VehicleSignalListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'vehicle_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_vehicle_id_signals_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_vehicle_id_signals_delete`")  # noqa: E501
        # verify the required parameter 'vehicle_id' is set
        if ('vehicle_id' not in params or
                params['vehicle_id'] is None):
            raise ValueError("Missing the required parameter `vehicle_id` when calling `api_v2_vehicles_vehicle_id_signals_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vehicle_id' in params:
            path_params['vehicle_id'] = params['vehicle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles/{vehicle_id}/signals', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VehicleSignalListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_vehicle_id_signals_get(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Gets a list of all signals.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_signals_get(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :param float cache: Use cache or not.
        :return: VehicleSignalListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_vehicle_id_signals_get_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_vehicle_id_signals_get_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_vehicle_id_signals_get_with_http_info(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Gets a list of all signals.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_signals_get_with_http_info(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :param float cache: Use cache or not.
        :return: VehicleSignalListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'vehicle_id', 'cache']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_vehicle_id_signals_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_vehicle_id_signals_get`")  # noqa: E501
        # verify the required parameter 'vehicle_id' is set
        if ('vehicle_id' not in params or
                params['vehicle_id'] is None):
            raise ValueError("Missing the required parameter `vehicle_id` when calling `api_v2_vehicles_vehicle_id_signals_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vehicle_id' in params:
            path_params['vehicle_id'] = params['vehicle_id']  # noqa: E501

        query_params = []
        if 'cache' in params:
            query_params.append(('cache', params['cache']))  # noqa: E501

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles/{vehicle_id}/signals', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VehicleSignalListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_vehicle_id_signals_patch(self, list_of_vehicle_signals_to_update, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Updates a list of one or more vehicle signals.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_signals_patch(list_of_vehicle_signals_to_update, x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VehicleSignalListForPatchExample list_of_vehicle_signals_to_update: A list of one or more value signals to update. (required)
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: VehicleSignalListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_vehicle_id_signals_patch_with_http_info(list_of_vehicle_signals_to_update, x_api_key, vehicle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_vehicle_id_signals_patch_with_http_info(list_of_vehicle_signals_to_update, x_api_key, vehicle_id, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_vehicle_id_signals_patch_with_http_info(self, list_of_vehicle_signals_to_update, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Updates a list of one or more vehicle signals.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_signals_patch_with_http_info(list_of_vehicle_signals_to_update, x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VehicleSignalListForPatchExample list_of_vehicle_signals_to_update: A list of one or more value signals to update. (required)
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: VehicleSignalListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['list_of_vehicle_signals_to_update', 'x_api_key', 'vehicle_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_vehicle_id_signals_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'list_of_vehicle_signals_to_update' is set
        if ('list_of_vehicle_signals_to_update' not in params or
                params['list_of_vehicle_signals_to_update'] is None):
            raise ValueError("Missing the required parameter `list_of_vehicle_signals_to_update` when calling `api_v2_vehicles_vehicle_id_signals_patch`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_vehicle_id_signals_patch`")  # noqa: E501
        # verify the required parameter 'vehicle_id' is set
        if ('vehicle_id' not in params or
                params['vehicle_id'] is None):
            raise ValueError("Missing the required parameter `vehicle_id` when calling `api_v2_vehicles_vehicle_id_signals_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vehicle_id' in params:
            path_params['vehicle_id'] = params['vehicle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'list_of_vehicle_signals_to_update' in params:
            body_params = params['list_of_vehicle_signals_to_update']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles/{vehicle_id}/signals', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VehicleSignalListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_vehicle_id_state_delete(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Unsets the state value for the vehicle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_state_delete(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_vehicle_id_state_delete_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_vehicle_id_state_delete_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_vehicle_id_state_delete_with_http_info(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Unsets the state value for the vehicle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_state_delete_with_http_info(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'vehicle_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_vehicle_id_state_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_vehicle_id_state_delete`")  # noqa: E501
        # verify the required parameter 'vehicle_id' is set
        if ('vehicle_id' not in params or
                params['vehicle_id'] is None):
            raise ValueError("Missing the required parameter `vehicle_id` when calling `api_v2_vehicles_vehicle_id_state_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vehicle_id' in params:
            path_params['vehicle_id'] = params['vehicle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles/{vehicle_id}/state', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_vehicle_id_state_get(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Gets the state value of the vehicle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_state_get(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_vehicle_id_state_get_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_vehicle_id_state_get_with_http_info(x_api_key, vehicle_id, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_vehicle_id_state_get_with_http_info(self, x_api_key, vehicle_id, **kwargs):  # noqa: E501
        """Gets the state value of the vehicle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_state_get_with_http_info(x_api_key, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'vehicle_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_vehicle_id_state_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_vehicle_id_state_get`")  # noqa: E501
        # verify the required parameter 'vehicle_id' is set
        if ('vehicle_id' not in params or
                params['vehicle_id'] is None):
            raise ValueError("Missing the required parameter `vehicle_id` when calling `api_v2_vehicles_vehicle_id_state_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vehicle_id' in params:
            path_params['vehicle_id'] = params['vehicle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles/{vehicle_id}/state', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_vehicles_vehicle_id_state_patch(self, x_api_key, new_vehicle_state_value, vehicle_id, **kwargs):  # noqa: E501
        """Sets a state value for the vehicle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_state_patch(x_api_key, new_vehicle_state_value, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str new_vehicle_state_value: The new value. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_vehicles_vehicle_id_state_patch_with_http_info(x_api_key, new_vehicle_state_value, vehicle_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_vehicles_vehicle_id_state_patch_with_http_info(x_api_key, new_vehicle_state_value, vehicle_id, **kwargs)  # noqa: E501
            return data

    def api_v2_vehicles_vehicle_id_state_patch_with_http_info(self, x_api_key, new_vehicle_state_value, vehicle_id, **kwargs):  # noqa: E501
        """Sets a state value for the vehicle.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_vehicles_vehicle_id_state_patch_with_http_info(x_api_key, new_vehicle_state_value, vehicle_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str new_vehicle_state_value: The new value. (required)
        :param str vehicle_id: The ID of the vehicle. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'new_vehicle_state_value', 'vehicle_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_vehicles_vehicle_id_state_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_vehicles_vehicle_id_state_patch`")  # noqa: E501
        # verify the required parameter 'new_vehicle_state_value' is set
        if ('new_vehicle_state_value' not in params or
                params['new_vehicle_state_value'] is None):
            raise ValueError("Missing the required parameter `new_vehicle_state_value` when calling `api_v2_vehicles_vehicle_id_state_patch`")  # noqa: E501
        # verify the required parameter 'vehicle_id' is set
        if ('vehicle_id' not in params or
                params['vehicle_id'] is None):
            raise ValueError("Missing the required parameter `vehicle_id` when calling `api_v2_vehicles_vehicle_id_state_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'vehicle_id' in params:
            path_params['vehicle_id'] = params['vehicle_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'new_vehicle_state_value' in params:
            body_params = params['new_vehicle_state_value']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/vehicles/{vehicle_id}/state', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
