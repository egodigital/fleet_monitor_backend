# coding: utf-8

"""
    Vehicle Booking API by e.GO Digital 

    Describes all backend endpoints.  # noqa: E501

    OpenAPI spec version: 2.0.5
    Contact: hello@e-go-digital.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ..api_client import ApiClient


class BookingsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v2_bookings_booking_id_cancel_patch(self, x_api_key, booking_id, **kwargs):  # noqa: E501
        """Cancels a booking.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bookings_booking_id_cancel_patch(x_api_key, booking_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str booking_id: The ID of the booking. (required)
        :return: CancelVehicleBookingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_bookings_booking_id_cancel_patch_with_http_info(x_api_key, booking_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_bookings_booking_id_cancel_patch_with_http_info(x_api_key, booking_id, **kwargs)  # noqa: E501
            return data

    def api_v2_bookings_booking_id_cancel_patch_with_http_info(self, x_api_key, booking_id, **kwargs):  # noqa: E501
        """Cancels a booking.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bookings_booking_id_cancel_patch_with_http_info(x_api_key, booking_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str booking_id: The ID of the booking. (required)
        :return: CancelVehicleBookingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'booking_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_bookings_booking_id_cancel_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_bookings_booking_id_cancel_patch`")  # noqa: E501
        # verify the required parameter 'booking_id' is set
        if ('booking_id' not in params or
                params['booking_id'] is None):
            raise ValueError("Missing the required parameter `booking_id` when calling `api_v2_bookings_booking_id_cancel_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'booking_id' in params:
            path_params['booking_id'] = params['booking_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/bookings/{booking_id}/cancel', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CancelVehicleBookingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_bookings_booking_id_delete(self, x_api_key, booking_id, **kwargs):  # noqa: E501
        """Deletes a vehicle booking.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bookings_booking_id_delete(x_api_key, booking_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str booking_id: The ID of the booking. (required)
        :return: DeleteVehicleBookingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_bookings_booking_id_delete_with_http_info(x_api_key, booking_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_bookings_booking_id_delete_with_http_info(x_api_key, booking_id, **kwargs)  # noqa: E501
            return data

    def api_v2_bookings_booking_id_delete_with_http_info(self, x_api_key, booking_id, **kwargs):  # noqa: E501
        """Deletes a vehicle booking.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bookings_booking_id_delete_with_http_info(x_api_key, booking_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str booking_id: The ID of the booking. (required)
        :return: DeleteVehicleBookingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'booking_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_bookings_booking_id_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_bookings_booking_id_delete`")  # noqa: E501
        # verify the required parameter 'booking_id' is set
        if ('booking_id' not in params or
                params['booking_id'] is None):
            raise ValueError("Missing the required parameter `booking_id` when calling `api_v2_bookings_booking_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'booking_id' in params:
            path_params['booking_id'] = params['booking_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/bookings/{booking_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeleteVehicleBookingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_bookings_booking_id_finish_patch(self, x_api_key, booking_id, **kwargs):  # noqa: E501
        """Finishes a booking.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bookings_booking_id_finish_patch(x_api_key, booking_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str booking_id: The ID of the booking. (required)
        :return: FinishVehicleBookingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_bookings_booking_id_finish_patch_with_http_info(x_api_key, booking_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_bookings_booking_id_finish_patch_with_http_info(x_api_key, booking_id, **kwargs)  # noqa: E501
            return data

    def api_v2_bookings_booking_id_finish_patch_with_http_info(self, x_api_key, booking_id, **kwargs):  # noqa: E501
        """Finishes a booking.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bookings_booking_id_finish_patch_with_http_info(x_api_key, booking_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str booking_id: The ID of the booking. (required)
        :return: FinishVehicleBookingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'booking_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_bookings_booking_id_finish_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_bookings_booking_id_finish_patch`")  # noqa: E501
        # verify the required parameter 'booking_id' is set
        if ('booking_id' not in params or
                params['booking_id'] is None):
            raise ValueError("Missing the required parameter `booking_id` when calling `api_v2_bookings_booking_id_finish_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'booking_id' in params:
            path_params['booking_id'] = params['booking_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/bookings/{booking_id}/finish', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FinishVehicleBookingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_bookings_booking_id_start_patch(self, x_api_key, booking_id, **kwargs):  # noqa: E501
        """Starts a booking.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bookings_booking_id_start_patch(x_api_key, booking_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str booking_id: The ID of the booking. (required)
        :return: StartVehicleBookingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_bookings_booking_id_start_patch_with_http_info(x_api_key, booking_id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_bookings_booking_id_start_patch_with_http_info(x_api_key, booking_id, **kwargs)  # noqa: E501
            return data

    def api_v2_bookings_booking_id_start_patch_with_http_info(self, x_api_key, booking_id, **kwargs):  # noqa: E501
        """Starts a booking.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bookings_booking_id_start_patch_with_http_info(x_api_key, booking_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str booking_id: The ID of the booking. (required)
        :return: StartVehicleBookingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', 'booking_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_bookings_booking_id_start_patch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_bookings_booking_id_start_patch`")  # noqa: E501
        # verify the required parameter 'booking_id' is set
        if ('booking_id' not in params or
                params['booking_id'] is None):
            raise ValueError("Missing the required parameter `booking_id` when calling `api_v2_bookings_booking_id_start_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'booking_id' in params:
            path_params['booking_id'] = params['booking_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/bookings/{booking_id}/start', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StartVehicleBookingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v2_bookings_get(self, x_api_key, **kwargs):  # noqa: E501
        """Returns all vehicle bookings.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bookings_get(x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str _from: The filter for start date (UTC).
        :param str until: The filter for end date (UTC).
        :return: VehicleBookingListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v2_bookings_get_with_http_info(x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v2_bookings_get_with_http_info(x_api_key, **kwargs)  # noqa: E501
            return data

    def api_v2_bookings_get_with_http_info(self, x_api_key, **kwargs):  # noqa: E501
        """Returns all vehicle bookings.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v2_bookings_get_with_http_info(x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_api_key: The API key. (required)
        :param str _from: The filter for start date (UTC).
        :param str until: The filter for end date (UTC).
        :return: VehicleBookingListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_api_key', '_from', 'until']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v2_bookings_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `api_v2_bookings_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'until' in params:
            query_params.append(('until', params['until']))  # noqa: E501

        header_params = {}
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/bookings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VehicleBookingListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
